{"version":3,"sources":["webpack:///path---2017-02-19-laravel-artisan-create-crud-5381eae96ee7c3afb820.js","webpack:///./.cache/json/2017-02-19-laravel-artisan-create-crud.json"],"names":["webpackJsonp","355","module","exports","data","post","html","fields","title","date","url","pathContext","slug","prev","_PARENT","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,qwwBAAy4wBC,QAA4wBC,MAAA,8BAAAC,KAAA,oBAAAC,IAAA,qEAA2IC,aAAgBC,KAAA,2CAAAC,MAA0DN,QAAUC,MAAA,uBAAAC,KAAA,iBAAAG,KAAA,oCAAAE,QAAA,UAAqHA,QAAA,UAAoBC,MAASR,QAAUC,MAAA,sBAAAC,KAAA,iBAAAG,KAAA,mCAAAE,QAAA,UAAmHA,QAAA,UAAoBA,QAAA","file":"path---2017-02-19-laravel-artisan-create-crud-5381eae96ee7c3afb820.js","sourcesContent":["webpackJsonp([174035726735906],{\n\n/***/ 355:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"html\":\"<p>I recently found myself creating a simple CMS in Laravel to administer a small site, and wanted to speed up development while abstracting away from the fiddly bits around creating CRUD functionality. So I created an <a href=\\\"https://laravel.com/docs/5.4/artisan\\\">Artisan command</a> to generate all the boring bits. Now I just run</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>art crud:make {resource-name}</code></pre>\\n      </div>\\n<p>And the model, migration, controller, routes and views are created for me. I'll take you through the steps I followed to get to this point.</p>\\n<p>1 - Create the <code>artisan</code> command.</p>\\n<p>This was easy. As <a href=\\\"https://laravel.com/docs/5.4/artisan#writing-commands\\\">the manual</a> says, just run</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>php artisan make:command [name-of-command]</code></pre>\\n      </div>\\n<p>and <a href=\\\"https://laravel.com/docs/5.4/artisan#registering-commands\\\">add it</a> to <code>app/Console/Kernel.php</code>. From there we can fill in the <code>signature</code>: 'crud:make {name}', and start to flesh out the <code>handle</code> method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">argument</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Creating CRUD for table \\\"'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token string\\\">'\\\"'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeModel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeController</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Controller created successfully.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeRoutes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Routes created successfully.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeViews</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Views created successfully.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeMenu</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Admin menu created successfully.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>2 - Make the model.</p>\\n<p>This bit's also straightforward. We want it so that when we run <code>crud:make</code> a model, controller etc are created. The model and migration are the easiest because an <code>artisan</code> command already exists for that. So again, following <a href=\\\"https://laravel.com/docs/5.4/artisan#programmatically-executing-commands\\\">the manual</a>, we arrive at:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeModel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'make:model'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'name'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'-m'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This calls the <code>artisan make:model</code> command and the <code>-m</code> flag means that it should create the migration. That's two birds with one stone.</p>\\n<p>3 - Make the controller.</p>\\n<p>This is a bit more tricky. We could just use the <code>artisan make:controller</code> command, but we want some boilerplate already in there (the various CRUD commands). The answer is to create a <code>controller.stub</code> - basically a template of how we want the controller to look - and to inject our new resource's name at the appropriate points. This can be done easily with <code>str_replace</code>. So <code>makeController</code> looks a bit like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeController</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$controllerName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token string\\\">'Controller.php'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token function\\\">base_path</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'app/Http/Controllers/'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$controllerName</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">compileStub</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'controller.stub'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>First we create the target name of the controller, which will be the resource's name concatenated to 'Controller.php'. We then use <code>file_put_contents</code> to create a file. The destination of the file is the first argument (i.e. the <code>Controllers</code> folder), while the second argument is the contents of the file. I use a helper method <code>compileStub</code> to inject the resource's name where applicable.</p>\\n<p>The <code>controller.stub</code> file is basically a resource controller with the methods partially filled in. I won't give the whole file - that will vary from app to app - but for me, the class and <code>index</code> method look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>User</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Request</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>Controller <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Controller</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">__construct</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$rows</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"{{name\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'admin.{{ \\\"{{routeName\\\" }}}}.index'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'rows'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$rows</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>I use the convention of two curly brackets to specify the placeholders where the name will be injected: <code>{{ \\\"{{name\\\" }}}}</code> and <code>{{ \\\"{{routeName\\\" }}}}</code>. So if our resource is called <code>Post</code>, the above would resolve to:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Post</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>User</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Request</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">PostController</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Controller</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">__construct</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$rows</span> <span class=\\\"token operator\\\">=</span> Post<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'admin.posts.index'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'rows'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$rows</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This replacement occurs in my <code>compileStub</code> method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">compileStub</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$stub</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">'{{ \\\"{{routeName\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">pluralisedName</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token string\\\">'{{ \\\"{{argName\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token function\\\">file_get_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">base_path</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'app/stubs/crud/'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$stub</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This rather ungainly code replaces all instances of <code>{{ \\\"{{name\\\" }}}}</code> with the resource name; all instances of <code>{{ \\\"{{routeName\\\" }}}}</code> with a pluralised, lower-case version of the name (I'll leave it up to you to figure out the pluralisation); and all instances of <code>{{ \\\"{{argName\\\" }}}}</code> with a lower-case version of the resource name (which I assume to be singular). This is just the nomenclature I use in my CMS - it could be anything.</p>\\n<p>4 - Make the routes.</p>\\n<p>This follows a similar principle to the previous step: I have a stub file (<code>routes.stub</code>) which contains the generic routes for a resource:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Route<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@index'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/create'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@create'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@store'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/{{ \\\"{{{argName\\\" }}}}}/edit'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@edit'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">patch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/{{ \\\"{{{argName\\\" }}}}}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@update'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/{{ \\\"{{{argName\\\" }}}}}/delete'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@confirmDelete'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/{{ \\\"{{{argName\\\" }}}}}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@destroy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>I then replace the placeholders with the resource's name but this time instead of creating a new file I append this to the end of my existing admin routes file:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeRoutes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token function\\\">base_path</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'routes/admin.php'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">compileStub</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'routes.stub'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token constant\\\">FILE_APPEND</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>5 - Make the views.</p>\\n<p>This is getting a bit predictable. Again, to create the CMS views I have a stub for each view which I then inject with the appropriate names, before creating the views folder for this resource and creating the view files from the stubs.</p>\\n<p>That's it! In following this procedure with stubs and injecting the resource name I was just copying how Laravel already does it. If you take a look at the code for the <code>make:auth</code> command, in <code>framework\\\\src\\\\Illuminate\\\\Auth\\\\Console\\\\MakeAuthCommand.php</code> (<a href=\\\"https://github.com/laravel/framework/blob/5.4/src/Illuminate/Auth/Console/MakeAuthCommand.php\\\">source on Github</a>) you'll find almost exactly this workflow.</p>\",\"fields\":{\"title\":\"laravel artisan create crud\",\"date\":\"19 February, 2017\",\"url\":\"http://unlikenesses.com/2017-02-19-laravel-artisan-create-crud/\"}}},\"pathContext\":{\"slug\":\"/2017-02-19-laravel-artisan-create-crud/\",\"prev\":{\"fields\":{\"title\":\"laravel on fasthosts\",\"date\":\"12 March, 2016\",\"slug\":\"/2016-03-12-laravel-on-fasthosts/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"next\":{\"fields\":{\"title\":\"understanding react\",\"date\":\"04 April, 2017\",\"slug\":\"/2017-04-04-understanding-react/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2017-02-19-laravel-artisan-create-crud-5381eae96ee7c3afb820.js","module.exports = {\"data\":{\"post\":{\"html\":\"<p>I recently found myself creating a simple CMS in Laravel to administer a small site, and wanted to speed up development while abstracting away from the fiddly bits around creating CRUD functionality. So I created an <a href=\\\"https://laravel.com/docs/5.4/artisan\\\">Artisan command</a> to generate all the boring bits. Now I just run</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>art crud:make {resource-name}</code></pre>\\n      </div>\\n<p>And the model, migration, controller, routes and views are created for me. I'll take you through the steps I followed to get to this point.</p>\\n<p>1 - Create the <code>artisan</code> command.</p>\\n<p>This was easy. As <a href=\\\"https://laravel.com/docs/5.4/artisan#writing-commands\\\">the manual</a> says, just run</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>php artisan make:command [name-of-command]</code></pre>\\n      </div>\\n<p>and <a href=\\\"https://laravel.com/docs/5.4/artisan#registering-commands\\\">add it</a> to <code>app/Console/Kernel.php</code>. From there we can fill in the <code>signature</code>: 'crud:make {name}', and start to flesh out the <code>handle</code> method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">argument</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Creating CRUD for table \\\"'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token string\\\">'\\\"'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeModel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeController</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Controller created successfully.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeRoutes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Routes created successfully.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeViews</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Views created successfully.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">makeMenu</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Admin menu created successfully.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>2 - Make the model.</p>\\n<p>This bit's also straightforward. We want it so that when we run <code>crud:make</code> a model, controller etc are created. The model and migration are the easiest because an <code>artisan</code> command already exists for that. So again, following <a href=\\\"https://laravel.com/docs/5.4/artisan#programmatically-executing-commands\\\">the manual</a>, we arrive at:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeModel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'make:model'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'name'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'-m'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This calls the <code>artisan make:model</code> command and the <code>-m</code> flag means that it should create the migration. That's two birds with one stone.</p>\\n<p>3 - Make the controller.</p>\\n<p>This is a bit more tricky. We could just use the <code>artisan make:controller</code> command, but we want some boilerplate already in there (the various CRUD commands). The answer is to create a <code>controller.stub</code> - basically a template of how we want the controller to look - and to inject our new resource's name at the appropriate points. This can be done easily with <code>str_replace</code>. So <code>makeController</code> looks a bit like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeController</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$controllerName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token string\\\">'Controller.php'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token function\\\">base_path</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'app/Http/Controllers/'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$controllerName</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">compileStub</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'controller.stub'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>First we create the target name of the controller, which will be the resource's name concatenated to 'Controller.php'. We then use <code>file_put_contents</code> to create a file. The destination of the file is the first argument (i.e. the <code>Controllers</code> folder), while the second argument is the contents of the file. I use a helper method <code>compileStub</code> to inject the resource's name where applicable.</p>\\n<p>The <code>controller.stub</code> file is basically a resource controller with the methods partially filled in. I won't give the whole file - that will vary from app to app - but for me, the class and <code>index</code> method look like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>User</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Request</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>Controller <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Controller</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">__construct</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$rows</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> <span class=\\\"token string\\\">\\\"{{name\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'admin.{{ \\\"{{routeName\\\" }}}}.index'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'rows'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$rows</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>I use the convention of two curly brackets to specify the placeholders where the name will be injected: <code>{{ \\\"{{name\\\" }}}}</code> and <code>{{ \\\"{{routeName\\\" }}}}</code>. So if our resource is called <code>Post</code>, the above would resolve to:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Controllers</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Post</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>User</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Illuminate<span class=\\\"token punctuation\\\">\\\\</span>Http<span class=\\\"token punctuation\\\">\\\\</span>Request</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">PostController</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Controller</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">__construct</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">index</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$rows</span> <span class=\\\"token operator\\\">=</span> Post<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">view</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'admin.posts.index'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'rows'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$rows</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This replacement occurs in my <code>compileStub</code> method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">compileStub</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$stub</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">'{{ \\\"{{routeName\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">pluralisedName</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token function\\\">str_replace</span><span class=\\\"token punctuation\\\">(</span>\\n                <span class=\\\"token string\\\">'{{ \\\"{{argName\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token function\\\">strtolower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">name</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n                <span class=\\\"token function\\\">file_get_contents</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">base_path</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'app/stubs/crud/'</span> <span class=\\\"token punctuation\\\">.</span> <span class=\\\"token variable\\\">$stub</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>This rather ungainly code replaces all instances of <code>{{ \\\"{{name\\\" }}}}</code> with the resource name; all instances of <code>{{ \\\"{{routeName\\\" }}}}</code> with a pluralised, lower-case version of the name (I'll leave it up to you to figure out the pluralisation); and all instances of <code>{{ \\\"{{argName\\\" }}}}</code> with a lower-case version of the resource name (which I assume to be singular). This is just the nomenclature I use in my CMS - it could be anything.</p>\\n<p>4 - Make the routes.</p>\\n<p>This follows a similar principle to the previous step: I have a stub file (<code>routes.stub</code>) which contains the generic routes for a resource:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Route<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@index'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/create'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@create'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@store'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/{{ \\\"{{{argName\\\" }}}}}/edit'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@edit'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">patch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/{{ \\\"{{{argName\\\" }}}}}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@update'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/{{ \\\"{{{argName\\\" }}}}}/delete'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@confirmDelete'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nRoute<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/{{ \\\"{{routeName\\\" }}}}/{{ \\\"{{{argName\\\" }}}}}'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'{{ \\\"{{name\\\" }}}}Controller@destroy'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>I then replace the placeholders with the resource's name but this time instead of creating a new file I append this to the end of my existing admin routes file:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeRoutes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">file_put_contents</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token function\\\">base_path</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'routes/admin.php'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">compileStub</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'routes.stub'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token constant\\\">FILE_APPEND</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>5 - Make the views.</p>\\n<p>This is getting a bit predictable. Again, to create the CMS views I have a stub for each view which I then inject with the appropriate names, before creating the views folder for this resource and creating the view files from the stubs.</p>\\n<p>That's it! In following this procedure with stubs and injecting the resource name I was just copying how Laravel already does it. If you take a look at the code for the <code>make:auth</code> command, in <code>framework\\\\src\\\\Illuminate\\\\Auth\\\\Console\\\\MakeAuthCommand.php</code> (<a href=\\\"https://github.com/laravel/framework/blob/5.4/src/Illuminate/Auth/Console/MakeAuthCommand.php\\\">source on Github</a>) you'll find almost exactly this workflow.</p>\",\"fields\":{\"title\":\"laravel artisan create crud\",\"date\":\"19 February, 2017\",\"url\":\"http://unlikenesses.com/2017-02-19-laravel-artisan-create-crud/\"}}},\"pathContext\":{\"slug\":\"/2017-02-19-laravel-artisan-create-crud/\",\"prev\":{\"fields\":{\"title\":\"laravel on fasthosts\",\"date\":\"12 March, 2016\",\"slug\":\"/2016-03-12-laravel-on-fasthosts/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"next\":{\"fields\":{\"title\":\"understanding react\",\"date\":\"04 April, 2017\",\"slug\":\"/2017-04-04-understanding-react/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2017-02-19-laravel-artisan-create-crud.json\n// module id = 355\n// module chunks = 174035726735906"],"sourceRoot":""}