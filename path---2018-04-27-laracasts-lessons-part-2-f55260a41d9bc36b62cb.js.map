{"version":3,"sources":["webpack:///path---2018-04-27-laracasts-lessons-part-2-f55260a41d9bc36b62cb.js","webpack:///./.cache/json/2018-04-27-laracasts-lessons-part-2.json"],"names":["webpackJsonp","354","module","exports","data","post","html","fields","title","date","url","pathContext","slug","prev","_PARENT","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,u59BAA+t8BC,QAAyiDC,MAAA,iCAAAC,KAAA,iBAAAC,IAAA,kEAAwIC,aAAgBC,KAAA,wCAAAC,MAAuDN,QAAUC,MAAA,iCAAAC,KAAA,iBAAAG,KAAA;AAAAE,QAAA,UAA4HA,QAAA,UAAoBC,KAAA,KAAAD,QAAA","file":"path---2018-04-27-laracasts-lessons-part-2-f55260a41d9bc36b62cb.js","sourcesContent":["webpackJsonp([147632645264318],{\n\n/***/ 354:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"html\":\"<p>This is part 2 of my collection of tips I've taken from <a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel\\\">Let's Build a Forum with Laravel and TDD</a>, the mega-tutorial (102 lessons) by Jeffrey Way on his <a href=\\\"https://laracasts.com\\\">Laracasts</a> site. <a href=\\\"http://unlikenesses.com/2018-03-24-laracasts-lessons/\\\">Part 1 is here.</a> This post contains 51 tips, covering lessons 43-102.</p>\\n<h4><a name=\\\"51\\\"></a> 51.</h4>\\n<p>The artisan <a href=\\\"https://laravel.com/docs/5.6/notifications#database-prerequisites\\\"><code>notifications:table</code></a> command creates a migration for a table to hold database notifications. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/43\\\">Source</a>]</p>\\n<h4><a name=\\\"52\\\"></a> 52.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/helpers#method-tap\\\"><code>tap</code> helper</a>, <a href=\\\"https://medium.com/@taylorotwell/tap-tap-tap-1fc6fc1f93a6\\\">inspired by Ruby</a> can help refactoring by removing temporary variables. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/44\\\">Source</a>]</p>\\n<h4><a name=\\\"53\\\"></a> 53.</h4>\\n<p>Use the <a href=\\\"https://laravel.com/docs/5.6/events\\\"><code>artisan event:generate</code> command</a> to create events and listeners. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/46\\\">Source</a>]</p>\\n<h4><a name=\\\"54\\\"></a> 54.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/mocking#notification-fake\\\"><code>Notification::fake</code> and <code>Notification:assertSentTo</code> methods</a> allow you to test notifications without triggering their usual behaviour. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/47\\\">Source</a>]</p>\\n<h4><a name=\\\"55\\\"></a> 55.</h4>\\n<p>JW uses <code>[identifier]CacheKey</code> as a method to supply a single point of truth for a cache's key. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/48\\\">Source</a>]</p>\\n<h4><a name=\\\"56\\\"></a> 56.</h4>\\n<p>An example of using Laravel's container when refactoring spam inspection methods to their own classes: [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/50\\\">Source</a>], around 06:35.</p>\\n<h4><a name=\\\"57\\\"></a> 57.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/helpers#method-resolve\\\"><code>resolve</code> method</a> resolves a class out of Laravel's container. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/51\\\">Source</a>]</p>\\n<h4><a name=\\\"58\\\"></a> 58.</h4>\\n<p>JW uses a <a href=\\\"https://httpstatuses.com/422\\\"><code>422 Unprocessable Entity</code></a> HTTP status code when catching exceptions thrown during AJAX calls. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/52\\\">Source</a>]</p>\\n<h4><a name=\\\"59\\\"></a> 59.</h4>\\n<p>Artisan's <a href=\\\"https://laravel.com/docs/5.6/validation#custom-validation-rules\\\"><code>make:rule</code> command</a> will scaffold the necessary code for custom validation rules. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/53\\\">Source</a>]</p>\\n<h4><a name=\\\"60\\\"></a> 60.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/routing#rate-limiting\\\"><code>throttle</code> middleware</a> rate limits access to Laravel routes. But JW notes that failing validation would make this solution problematic. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/54\\\">Source</a>]</p>\\n<h4><a name=\\\"61\\\"></a> 61.</h4>\\n<p>Use <a href=\\\"https://laravel.com/docs/5.6/validation#form-request-validation\\\"><code>form requests</code></a> for more complex form situations requiring authorization and validation. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/55\\\">Source</a>]</p>\\n<h4><a name=\\\"62\\\"></a> 62.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/collections#creating-collections\\\"><code>collect</code> helper</a> converts arrays to collections. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/57\\\">Source</a>]</p>\\n<h4><a name=\\\"63\\\"></a> 63.</h4>\\n<p>When the <a href=\\\"https://laravel.com/docs/5.6/collections#method-filter\\\"><code>filter</code> method</a> is called without an argument on a collection it removes falsey values. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/57\\\">Source</a>]</p>\\n<h4><a name=\\\"64\\\"></a> 64.</h4>\\n<p>In the tutorial, JW uses the <a href=\\\"https://github.com/ichord/At.js\\\">At.js</a> library to add mentions autocomplete functionality to the forum. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/60\\\">Source</a>]</p>\\n<h4><a name=\\\"65\\\"></a> 65.</h4>\\n<p>Use the <a href=\\\"https://laravel.com/docs/5.6/collections#method-pluck\\\"><code>pluck</code> method</a> to get the values for a given key from a collection. JW uses it to return values from a collection retrieved by Eloquent:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">return</span> User<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">where</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'LIKE'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'$search%'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">take</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">pluck</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"66\\\"></a> 66.</h4>\\n<p>One way to grab CSS from an NPM package: use the <a href=\\\"https://github.com/JeffreyWay/laravel-mix/blob/master/docs/copying-files.md\\\"><code>copy</code> method</a> in your <code>webpack.mix.js</code> file:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>mix<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">js</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'resources/assets/js/app.js'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'public.js'</span><span class=\\\"token punctuation\\\">)</span>\\n   <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'resources/assets/sass/app.scss'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'public.css'</span><span class=\\\"token punctuation\\\">)</span>\\n   <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'node_modules/[path_to_src_css_file]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'[path_to_dest_css_file]'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"67\\\"></a> 67.</h4>\\n<p>Another way to grab a package's CSS: import it in your main <code>scss</code> file. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"68\\\"></a> 68.</h4>\\n<p>Another way to grab a package's CSS: just manually copy it to your <code>css</code> directory. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"69\\\"></a> 69.</h4>\\n<p>To import CSS files depending on the view, use a <code>@yield('head')</code> directive, then in the template you want to load this file, include the <code>link</code> tag in a <code>@section('head')</code> directive. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"70\\\"></a> 70.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/http-tests#testing-file-uploads\\\"><code>UploadedFile::fake</code> method</a> allows you to fake a file (or image) for testing:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>UploadedFile<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">fake</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filename.jpg'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$width</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$height</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/63\\\">Source</a>]</p>\\n<h4><a name=\\\"71\\\"></a> 71.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/mocking#storage-fake\\\"><code>Storage::fake</code> method</a> will create a fake storage disk for testing. E.g.:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Storage<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">fake</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'public'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'POST'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'api/upload'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'file'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> UploadedFile<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">fake</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filename.jpg'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nStorage<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">disk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'public'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertExists</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filename.jpg'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/63\\\">Source</a>]</p>\\n<h4><a name=\\\"72\\\"></a> 72.</h4>\\n<p><a href=\\\"https://laravel.com/api/5.6/Illuminate/Http/FileHelpers.html#method_hashName\\\"><code>hashName</code></a> returns the filename for an uploaded file. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/63\\\">Source</a>]</p>\\n<h4><a name=\\\"73\\\"></a> 73.</h4>\\n<p>Compare Eloquent models with <a href=\\\"https://laravel.com/api/5.6/Illuminate/Database/Eloquent/Model.html#method_is\\\"><code>is</code></a> and <a href=\\\"https://laravel.com/api/5.6/Illuminate/Database/Eloquent/Model.html#method_isNot\\\"><code>isNot</code></a>. [From the comments to <a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/64\\\">Source</a>]</p>\\n<h4><a name=\\\"74\\\"></a> 74.</h4>\\n<p>How did I not know about this? The <code>input</code> tag <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept\\\">has an <code>accept</code> attribute</a> which takes a comma-separated list of content type specifiers, either file extensions, MIME types or <code>audio/*</code>, <code>video/*</code> or <code>image/*</code>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/65\\\">Source</a>]</p>\\n<h4><a name=\\\"76\\\"></a> 76.</h4>\\n<p>Any native attribute (e.g. <code>name</code> on a form element) specified on a Vue component instance will be passed to that component, when the root element of the component is a single form element. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/65\\\">Source</a>]</p>\\n<h4><a name=\\\"77\\\"></a> 77.</h4>\\n<p>As of PHP 7, you can use the <a href=\\\"http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce\\\"><code>null coalescing operator</code></a> to assign a default value. E.g.:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">return</span> Redis<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">cacheKey</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/68\\\">Source</a>]</p>\\n<p>The steps to create a custom <a href=\\\"https://laravel.com/docs/5.6/middleware\\\">middleware</a>:</p>\\n<ol>\\n<li>\\n<p><code>php artisan make:middleware NameOfMiddleware</code></p>\\n</li>\\n<li>\\n<p>In the <code>handle</code> method of the new middleware write the code to filter access to the route:</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$request</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">user</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">confirmed</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">redirect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/threads'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>List the middleware class in <code>app/Http/Kernel.php</code>:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$routeMiddleware</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'name-of-middleware'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> NameOfMiddleware<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Attach the middleware to a route:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Route<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'threads'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'ThreadsController@store'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">middleware</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name-of-middleware'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/71\\\">Source</a>]</p>\\n<h4><a name=\\\"79\\\"></a> 79.</h4>\\n<p>To simulate a new user registration in a test you can call the event that's called by the <code>register</code> method in the <code>RegistersUsers</code> trait:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token function\\\">event</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Registered</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$user</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/72\\\">Source</a>]</p>\\n<h4><a name=\\\"80\\\"></a> 80.</h4>\\n<p>Faking emails while testing can be done with the <a href=\\\"https://laravel.com/docs/5.6/mocking#mail-fake\\\"><code>Mail::fake</code></a> method.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Mail<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">fake</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">[</span>test code here<span class=\\\"token punctuation\\\">]</span>\\n\\nMail<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">assertSent</span><span class=\\\"token punctuation\\\">(</span>MailableName<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/72\\\">Source</a>]</p>\\n<h4><a name=\\\"81\\\"></a> 81.</h4>\\n<p>Eloquent models have a <a href=\\\"https://laravel.com/docs/5.6/eloquent-mutators#attribute-casting\\\"><code>$cast</code> property</a> that, in the words of the docs, \\\"provides a convenient method of converting attributes to common data types\\\". Useful, for example, for converting <code>0</code> or <code>1</code> to booleans. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/72\\\">Source</a>]</p>\\n<h4><a name=\\\"82\\\"></a> 82.</h4>\\n<p>The <a href=\\\"https://laravel.com/api/5.6/Illuminate/Database/Eloquent/Builder.html#method_forceCreate\\\"><code>forceCreate</code> Eloquent method</a> is like <code>create</code> except that it ignores any mass-assignment rules. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/72\\\">Source</a>]</p>\\n<h4><a name=\\\"83\\\"></a> 83.</h4>\\n<p>You can define modifications of your model factories with <a href=\\\"https://laravel.com/docs/5.6/database-testing#factory-states\\\">the <code>state</code> method</a>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/73\\\">Source</a>]</p>\\n<h4><a name=\\\"84\\\"></a> 84.</h4>\\n<p>Laravel's <a href=\\\"https://laravel.com/docs/5.6/helpers#method-str-slug\\\"><code>str-slug</code> helper</a> converts strings to slugs. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/75\\\">Source</a>]</p>\\n<h4><a name=\\\"85\\\"></a> 85.</h4>\\n<p>Use the query builder's <a href=\\\"https://laravel.com/docs/5.6/queries#aggregates\\\"><code>max</code> method</a> to return the highest value of a given model field. E.g.:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$max</span> <span class=\\\"token operator\\\">=</span> Book<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">wherePublisher</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foobar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'pages'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/76\\\">Source</a>]</p>\\n<h4><a name=\\\"86\\\"></a> 86.</h4>\\n<p>As of PHP 7, <a href=\\\"http://php.net/manual/en/language.types.string.php#language.types.string.substr\\\">you can access characters in strings</a> using an offset in array-type brackets. To access the final character of string, use <code>-1</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$final</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$slug</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/76\\\">Source</a>]</p>\\n<h4><a name=\\\"87\\\"></a> 87.</h4>\\n<p>Use the <a href=\\\"https://laravel.com/docs/5.6/helpers#method-abort-if\\\"><code>abort_if</code> helper</a> to throw an exception under a given boolean condition. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/78\\\">Source</a>]</p>\\n<h4><a name=\\\"88\\\"></a> 88.</h4>\\n<p>You can render an array as JSON in a blade template with the <a href=\\\"https://laravel.com/docs/5.6/blade#displaying-data\\\"><code>@json</code> directive</a>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/81\\\">Source</a>]</p>\\n<h4><a name=\\\"89\\\"></a> 89.</h4>\\n<p>MySQL has a <a href=\\\"https://dev.mysql.com/doc/refman/8.0/en/create-table-foreign-keys.html#foreign-keys-referential-actions\\\"><code>SET NULL</code> action</a> that can be set for <code>UPDATE</code> and <code>DELETE</code> operations on a foreign key. In a Laravel migration, this reads as:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$table</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">foreign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'user_id'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">references</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'users'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">onDelete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'set null'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/82\\\">Source</a>]</p>\\n<h4><a name=\\\"90\\\"></a> 90.</h4>\\n<p>If you get a \\\"Cannot add foreign key constraint\\\" error when migrating, that can be because the migration where you're setting the foreign key has a timestamp earlier than the migration for the table you're referencing in your foreign key. JW fixes this by manually altering the timestamp of the migration to a later date. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/82\\\">Source</a>]</p>\\n<h4><a name=\\\"91\\\"></a> 91.</h4>\\n<p>A potential error when using foreign keys and testing with an SQLite database: <a href=\\\"https://www.sqlite.org/foreignkeys.html#fk_enable\\\">foreign keys are not enabled by default</a>. To enable them, in your test include:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token constant\\\">DB</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">statement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'PRAGMA foreign_keys = ON'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/82\\\">Source</a>]</p>\\n<p>NB. A comment to this video notes that instead you can use:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Schema<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">enableForeignKeyConstraints</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4><a name=\\\"92\\\"></a> 92.</h4>\\n<p>Use double negation (<code>!!</code>) to cast variables to a boolean. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/85\\\">Source</a>]</p>\\n<h4><a name=\\\"93\\\"></a> 93.</h4>\\n<p>Use the <a href=\\\"https://laravel.com/docs/5.6/blade#php\\\"><code>@php</code> directive</a> to embed PHP code in Blade views. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/88\\\">Source</a>]</p>\\n<h4><a name=\\\"94\\\"></a> 94.</h4>\\n<p>It is recommended not to reference the <code>.env</code> file within the application. Instead, pull environment variables from a configuration file (e.g. <code>config/services.php</code>) which itself pulls from <code>.env</code>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/89\\\">Source</a>]</p>\\n<h4><a name=\\\"95\\\"></a> 95.</h4>\\n<p>Instead of getting the remote IP address with <code>$_SERVER['REMOTE_ADDR']</code>, use <a href=\\\"https://laravel.com/api/5.6/Illuminate/Http/Request.html#method_ip\\\"><code>request()->ip()</code></a>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/90\\\">Source</a>]</p>\\n<h4><a name=\\\"96\\\"></a> 96.</h4>\\n<p>Use <a href=\\\"https://laravel.com/api/5.3/Illuminate/Foundation/Application.html#method_runningUnitTests\\\"><code>app()->runningUnitTests()</code></a> for behaviour conditional on whether you're running your tests. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/90\\\">Source</a>]</p>\\n<h4><a name=\\\"97\\\"></a> 97.</h4>\\n<p>As of Laravel 5.5, validation returns the validated data, which makes it possible to create concise flows like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$thread</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">request</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">validate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'title'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">'required'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'body'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">'required'</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/91\\\">Source</a>]</p>\\n<h4><a name=\\\"98\\\"></a> 98.</h4>\\n<p>Using an external search service like Algolia can slow down tests. To circumvent this, set <code>SCOUT_DRIVER</code> to <code>null</code> in your test environment variables (<code>phpunit.xml</code>). For tests where you want to use the search service, you can update the config for that specific test:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token function\\\">config</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'scout.driver'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">'algolia'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/95\\\">Source</a>]</p>\\n<h4><a name=\\\"99\\\"></a> 99.</h4>\\n<p>For tests which use a search service, remember to remove any created elements at the end of the test to avoid false positives, with the <a href=\\\"https://laravel.com/docs/5.6/scout#removing-records\\\"><code>unsearchable</code> method</a> on a collection. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/95\\\">Source</a>]</p>\\n<h4><a name=\\\"100\\\"></a> 100.</h4>\\n<p>Specify the data sent to your search service by <a href=\\\"https://laravel.com/docs/5.6/scout#configuring-searchable-data\\\">overriding <code>toSearchableArray</code></a> in your model. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/97\\\">Source</a>]</p>\\n<h4><a name=\\\"101\\\"></a> 101.</h4>\\n<p>Any property passed to a Vue component that isn't accepted as a property in that component, will be assigned to the top-level element in that component's template. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/100\\\">Source</a>]</p>\\n<h4><a name=\\\"102\\\"></a> 102.</h4>\\n<p>When you want to display sanitized data in a Vue (or other front-end framework) component, and you want to sanitize it with PHP, you can do it with a <a href=\\\"https://laravel.com/docs/5.6/eloquent-mutators#accessors-and-mutators\\\">custom accessor</a>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/101\\\">Source</a>]</p>\",\"fields\":{\"title\":\"Lessons from Laracasts, Part 2\",\"date\":\"27 April, 2018\",\"url\":\"http://unlikenesses.com/2018-04-27-laracasts-lessons-part-2/\"}}},\"pathContext\":{\"slug\":\"/2018-04-27-laracasts-lessons-part-2/\",\"prev\":{\"fields\":{\"title\":\"Lessons from Laracasts, Part 1\",\"date\":\"24 March, 2018\",\"slug\":\"/2018-03-24-laracasts-lessons/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"next\":null,\"_PARENT\":\"SOURCE\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2018-04-27-laracasts-lessons-part-2-f55260a41d9bc36b62cb.js","module.exports = {\"data\":{\"post\":{\"html\":\"<p>This is part 2 of my collection of tips I've taken from <a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel\\\">Let's Build a Forum with Laravel and TDD</a>, the mega-tutorial (102 lessons) by Jeffrey Way on his <a href=\\\"https://laracasts.com\\\">Laracasts</a> site. <a href=\\\"http://unlikenesses.com/2018-03-24-laracasts-lessons/\\\">Part 1 is here.</a> This post contains 51 tips, covering lessons 43-102.</p>\\n<h4><a name=\\\"51\\\"></a> 51.</h4>\\n<p>The artisan <a href=\\\"https://laravel.com/docs/5.6/notifications#database-prerequisites\\\"><code>notifications:table</code></a> command creates a migration for a table to hold database notifications. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/43\\\">Source</a>]</p>\\n<h4><a name=\\\"52\\\"></a> 52.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/helpers#method-tap\\\"><code>tap</code> helper</a>, <a href=\\\"https://medium.com/@taylorotwell/tap-tap-tap-1fc6fc1f93a6\\\">inspired by Ruby</a> can help refactoring by removing temporary variables. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/44\\\">Source</a>]</p>\\n<h4><a name=\\\"53\\\"></a> 53.</h4>\\n<p>Use the <a href=\\\"https://laravel.com/docs/5.6/events\\\"><code>artisan event:generate</code> command</a> to create events and listeners. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/46\\\">Source</a>]</p>\\n<h4><a name=\\\"54\\\"></a> 54.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/mocking#notification-fake\\\"><code>Notification::fake</code> and <code>Notification:assertSentTo</code> methods</a> allow you to test notifications without triggering their usual behaviour. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/47\\\">Source</a>]</p>\\n<h4><a name=\\\"55\\\"></a> 55.</h4>\\n<p>JW uses <code>[identifier]CacheKey</code> as a method to supply a single point of truth for a cache's key. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/48\\\">Source</a>]</p>\\n<h4><a name=\\\"56\\\"></a> 56.</h4>\\n<p>An example of using Laravel's container when refactoring spam inspection methods to their own classes: [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/50\\\">Source</a>], around 06:35.</p>\\n<h4><a name=\\\"57\\\"></a> 57.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/helpers#method-resolve\\\"><code>resolve</code> method</a> resolves a class out of Laravel's container. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/51\\\">Source</a>]</p>\\n<h4><a name=\\\"58\\\"></a> 58.</h4>\\n<p>JW uses a <a href=\\\"https://httpstatuses.com/422\\\"><code>422 Unprocessable Entity</code></a> HTTP status code when catching exceptions thrown during AJAX calls. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/52\\\">Source</a>]</p>\\n<h4><a name=\\\"59\\\"></a> 59.</h4>\\n<p>Artisan's <a href=\\\"https://laravel.com/docs/5.6/validation#custom-validation-rules\\\"><code>make:rule</code> command</a> will scaffold the necessary code for custom validation rules. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/53\\\">Source</a>]</p>\\n<h4><a name=\\\"60\\\"></a> 60.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/routing#rate-limiting\\\"><code>throttle</code> middleware</a> rate limits access to Laravel routes. But JW notes that failing validation would make this solution problematic. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/54\\\">Source</a>]</p>\\n<h4><a name=\\\"61\\\"></a> 61.</h4>\\n<p>Use <a href=\\\"https://laravel.com/docs/5.6/validation#form-request-validation\\\"><code>form requests</code></a> for more complex form situations requiring authorization and validation. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/55\\\">Source</a>]</p>\\n<h4><a name=\\\"62\\\"></a> 62.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/collections#creating-collections\\\"><code>collect</code> helper</a> converts arrays to collections. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/57\\\">Source</a>]</p>\\n<h4><a name=\\\"63\\\"></a> 63.</h4>\\n<p>When the <a href=\\\"https://laravel.com/docs/5.6/collections#method-filter\\\"><code>filter</code> method</a> is called without an argument on a collection it removes falsey values. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/57\\\">Source</a>]</p>\\n<h4><a name=\\\"64\\\"></a> 64.</h4>\\n<p>In the tutorial, JW uses the <a href=\\\"https://github.com/ichord/At.js\\\">At.js</a> library to add mentions autocomplete functionality to the forum. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/60\\\">Source</a>]</p>\\n<h4><a name=\\\"65\\\"></a> 65.</h4>\\n<p>Use the <a href=\\\"https://laravel.com/docs/5.6/collections#method-pluck\\\"><code>pluck</code> method</a> to get the values for a given key from a collection. JW uses it to return values from a collection retrieved by Eloquent:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">return</span> User<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">where</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'LIKE'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'$search%'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">take</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">pluck</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"66\\\"></a> 66.</h4>\\n<p>One way to grab CSS from an NPM package: use the <a href=\\\"https://github.com/JeffreyWay/laravel-mix/blob/master/docs/copying-files.md\\\"><code>copy</code> method</a> in your <code>webpack.mix.js</code> file:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>mix<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">js</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'resources/assets/js/app.js'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'public.js'</span><span class=\\\"token punctuation\\\">)</span>\\n   <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'resources/assets/sass/app.scss'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'public.css'</span><span class=\\\"token punctuation\\\">)</span>\\n   <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">copy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'node_modules/[path_to_src_css_file]'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'[path_to_dest_css_file]'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"67\\\"></a> 67.</h4>\\n<p>Another way to grab a package's CSS: import it in your main <code>scss</code> file. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"68\\\"></a> 68.</h4>\\n<p>Another way to grab a package's CSS: just manually copy it to your <code>css</code> directory. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"69\\\"></a> 69.</h4>\\n<p>To import CSS files depending on the view, use a <code>@yield('head')</code> directive, then in the template you want to load this file, include the <code>link</code> tag in a <code>@section('head')</code> directive. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/61\\\">Source</a>]</p>\\n<h4><a name=\\\"70\\\"></a> 70.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/http-tests#testing-file-uploads\\\"><code>UploadedFile::fake</code> method</a> allows you to fake a file (or image) for testing:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>UploadedFile<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">fake</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filename.jpg'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$width</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$height</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/63\\\">Source</a>]</p>\\n<h4><a name=\\\"71\\\"></a> 71.</h4>\\n<p>The <a href=\\\"https://laravel.com/docs/5.6/mocking#storage-fake\\\"><code>Storage::fake</code> method</a> will create a fake storage disk for testing. E.g.:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Storage<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">fake</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'public'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">json</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'POST'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'api/upload'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'file'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> UploadedFile<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">fake</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filename.jpg'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nStorage<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">disk</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'public'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">assertExists</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filename.jpg'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/63\\\">Source</a>]</p>\\n<h4><a name=\\\"72\\\"></a> 72.</h4>\\n<p><a href=\\\"https://laravel.com/api/5.6/Illuminate/Http/FileHelpers.html#method_hashName\\\"><code>hashName</code></a> returns the filename for an uploaded file. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/63\\\">Source</a>]</p>\\n<h4><a name=\\\"73\\\"></a> 73.</h4>\\n<p>Compare Eloquent models with <a href=\\\"https://laravel.com/api/5.6/Illuminate/Database/Eloquent/Model.html#method_is\\\"><code>is</code></a> and <a href=\\\"https://laravel.com/api/5.6/Illuminate/Database/Eloquent/Model.html#method_isNot\\\"><code>isNot</code></a>. [From the comments to <a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/64\\\">Source</a>]</p>\\n<h4><a name=\\\"74\\\"></a> 74.</h4>\\n<p>How did I not know about this? The <code>input</code> tag <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept\\\">has an <code>accept</code> attribute</a> which takes a comma-separated list of content type specifiers, either file extensions, MIME types or <code>audio/*</code>, <code>video/*</code> or <code>image/*</code>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/65\\\">Source</a>]</p>\\n<h4><a name=\\\"76\\\"></a> 76.</h4>\\n<p>Any native attribute (e.g. <code>name</code> on a form element) specified on a Vue component instance will be passed to that component, when the root element of the component is a single form element. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/65\\\">Source</a>]</p>\\n<h4><a name=\\\"77\\\"></a> 77.</h4>\\n<p>As of PHP 7, you can use the <a href=\\\"http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce\\\"><code>null coalescing operator</code></a> to assign a default value. E.g.:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">return</span> Redis<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">cacheKey</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">?</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/68\\\">Source</a>]</p>\\n<p>The steps to create a custom <a href=\\\"https://laravel.com/docs/5.6/middleware\\\">middleware</a>:</p>\\n<ol>\\n<li>\\n<p><code>php artisan make:middleware NameOfMiddleware</code></p>\\n</li>\\n<li>\\n<p>In the <code>handle</code> method of the new middleware write the code to filter access to the route:</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span> <span class=\\\"token variable\\\">$request</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">user</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">confirmed</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">redirect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/threads'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>List the middleware class in <code>app/Http/Kernel.php</code>:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$routeMiddleware</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'name-of-middleware'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> NameOfMiddleware<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>Attach the middleware to a route:</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Route<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">post</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'threads'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'ThreadsController@store'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">middleware</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name-of-middleware'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/71\\\">Source</a>]</p>\\n<h4><a name=\\\"79\\\"></a> 79.</h4>\\n<p>To simulate a new user registration in a test you can call the event that's called by the <code>register</code> method in the <code>RegistersUsers</code> trait:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token function\\\">event</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Registered</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$user</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/72\\\">Source</a>]</p>\\n<h4><a name=\\\"80\\\"></a> 80.</h4>\\n<p>Faking emails while testing can be done with the <a href=\\\"https://laravel.com/docs/5.6/mocking#mail-fake\\\"><code>Mail::fake</code></a> method.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Mail<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">fake</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token punctuation\\\">[</span>test code here<span class=\\\"token punctuation\\\">]</span>\\n\\nMail<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">assertSent</span><span class=\\\"token punctuation\\\">(</span>MailableName<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/72\\\">Source</a>]</p>\\n<h4><a name=\\\"81\\\"></a> 81.</h4>\\n<p>Eloquent models have a <a href=\\\"https://laravel.com/docs/5.6/eloquent-mutators#attribute-casting\\\"><code>$cast</code> property</a> that, in the words of the docs, \\\"provides a convenient method of converting attributes to common data types\\\". Useful, for example, for converting <code>0</code> or <code>1</code> to booleans. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/72\\\">Source</a>]</p>\\n<h4><a name=\\\"82\\\"></a> 82.</h4>\\n<p>The <a href=\\\"https://laravel.com/api/5.6/Illuminate/Database/Eloquent/Builder.html#method_forceCreate\\\"><code>forceCreate</code> Eloquent method</a> is like <code>create</code> except that it ignores any mass-assignment rules. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/72\\\">Source</a>]</p>\\n<h4><a name=\\\"83\\\"></a> 83.</h4>\\n<p>You can define modifications of your model factories with <a href=\\\"https://laravel.com/docs/5.6/database-testing#factory-states\\\">the <code>state</code> method</a>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/73\\\">Source</a>]</p>\\n<h4><a name=\\\"84\\\"></a> 84.</h4>\\n<p>Laravel's <a href=\\\"https://laravel.com/docs/5.6/helpers#method-str-slug\\\"><code>str-slug</code> helper</a> converts strings to slugs. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/75\\\">Source</a>]</p>\\n<h4><a name=\\\"85\\\"></a> 85.</h4>\\n<p>Use the query builder's <a href=\\\"https://laravel.com/docs/5.6/queries#aggregates\\\"><code>max</code> method</a> to return the highest value of a given model field. E.g.:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$max</span> <span class=\\\"token operator\\\">=</span> Book<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">wherePublisher</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foobar'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'pages'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/76\\\">Source</a>]</p>\\n<h4><a name=\\\"86\\\"></a> 86.</h4>\\n<p>As of PHP 7, <a href=\\\"http://php.net/manual/en/language.types.string.php#language.types.string.substr\\\">you can access characters in strings</a> using an offset in array-type brackets. To access the final character of string, use <code>-1</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$final</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$slug</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/76\\\">Source</a>]</p>\\n<h4><a name=\\\"87\\\"></a> 87.</h4>\\n<p>Use the <a href=\\\"https://laravel.com/docs/5.6/helpers#method-abort-if\\\"><code>abort_if</code> helper</a> to throw an exception under a given boolean condition. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/78\\\">Source</a>]</p>\\n<h4><a name=\\\"88\\\"></a> 88.</h4>\\n<p>You can render an array as JSON in a blade template with the <a href=\\\"https://laravel.com/docs/5.6/blade#displaying-data\\\"><code>@json</code> directive</a>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/81\\\">Source</a>]</p>\\n<h4><a name=\\\"89\\\"></a> 89.</h4>\\n<p>MySQL has a <a href=\\\"https://dev.mysql.com/doc/refman/8.0/en/create-table-foreign-keys.html#foreign-keys-referential-actions\\\"><code>SET NULL</code> action</a> that can be set for <code>UPDATE</code> and <code>DELETE</code> operations on a foreign key. In a Laravel migration, this reads as:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$table</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">foreign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'user_id'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">references</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'users'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">onDelete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'set null'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/82\\\">Source</a>]</p>\\n<h4><a name=\\\"90\\\"></a> 90.</h4>\\n<p>If you get a \\\"Cannot add foreign key constraint\\\" error when migrating, that can be because the migration where you're setting the foreign key has a timestamp earlier than the migration for the table you're referencing in your foreign key. JW fixes this by manually altering the timestamp of the migration to a later date. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/82\\\">Source</a>]</p>\\n<h4><a name=\\\"91\\\"></a> 91.</h4>\\n<p>A potential error when using foreign keys and testing with an SQLite database: <a href=\\\"https://www.sqlite.org/foreignkeys.html#fk_enable\\\">foreign keys are not enabled by default</a>. To enable them, in your test include:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token constant\\\">DB</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">statement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'PRAGMA foreign_keys = ON'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/82\\\">Source</a>]</p>\\n<p>NB. A comment to this video notes that instead you can use:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code>Schema<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">enableForeignKeyConstraints</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h4><a name=\\\"92\\\"></a> 92.</h4>\\n<p>Use double negation (<code>!!</code>) to cast variables to a boolean. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/85\\\">Source</a>]</p>\\n<h4><a name=\\\"93\\\"></a> 93.</h4>\\n<p>Use the <a href=\\\"https://laravel.com/docs/5.6/blade#php\\\"><code>@php</code> directive</a> to embed PHP code in Blade views. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/88\\\">Source</a>]</p>\\n<h4><a name=\\\"94\\\"></a> 94.</h4>\\n<p>It is recommended not to reference the <code>.env</code> file within the application. Instead, pull environment variables from a configuration file (e.g. <code>config/services.php</code>) which itself pulls from <code>.env</code>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/89\\\">Source</a>]</p>\\n<h4><a name=\\\"95\\\"></a> 95.</h4>\\n<p>Instead of getting the remote IP address with <code>$_SERVER['REMOTE_ADDR']</code>, use <a href=\\\"https://laravel.com/api/5.6/Illuminate/Http/Request.html#method_ip\\\"><code>request()->ip()</code></a>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/90\\\">Source</a>]</p>\\n<h4><a name=\\\"96\\\"></a> 96.</h4>\\n<p>Use <a href=\\\"https://laravel.com/api/5.3/Illuminate/Foundation/Application.html#method_runningUnitTests\\\"><code>app()->runningUnitTests()</code></a> for behaviour conditional on whether you're running your tests. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/90\\\">Source</a>]</p>\\n<h4><a name=\\\"97\\\"></a> 97.</h4>\\n<p>As of Laravel 5.5, validation returns the validated data, which makes it possible to create concise flows like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$thread</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">update</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">request</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">validate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token string\\\">'title'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">'required'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">'body'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">'required'</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/91\\\">Source</a>]</p>\\n<h4><a name=\\\"98\\\"></a> 98.</h4>\\n<p>Using an external search service like Algolia can slow down tests. To circumvent this, set <code>SCOUT_DRIVER</code> to <code>null</code> in your test environment variables (<code>phpunit.xml</code>). For tests where you want to use the search service, you can update the config for that specific test:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token function\\\">config</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'scout.driver'</span> <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token string\\\">'algolia'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>[<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/95\\\">Source</a>]</p>\\n<h4><a name=\\\"99\\\"></a> 99.</h4>\\n<p>For tests which use a search service, remember to remove any created elements at the end of the test to avoid false positives, with the <a href=\\\"https://laravel.com/docs/5.6/scout#removing-records\\\"><code>unsearchable</code> method</a> on a collection. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/95\\\">Source</a>]</p>\\n<h4><a name=\\\"100\\\"></a> 100.</h4>\\n<p>Specify the data sent to your search service by <a href=\\\"https://laravel.com/docs/5.6/scout#configuring-searchable-data\\\">overriding <code>toSearchableArray</code></a> in your model. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/97\\\">Source</a>]</p>\\n<h4><a name=\\\"101\\\"></a> 101.</h4>\\n<p>Any property passed to a Vue component that isn't accepted as a property in that component, will be assigned to the top-level element in that component's template. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/100\\\">Source</a>]</p>\\n<h4><a name=\\\"102\\\"></a> 102.</h4>\\n<p>When you want to display sanitized data in a Vue (or other front-end framework) component, and you want to sanitize it with PHP, you can do it with a <a href=\\\"https://laravel.com/docs/5.6/eloquent-mutators#accessors-and-mutators\\\">custom accessor</a>. [<a href=\\\"https://laracasts.com/series/lets-build-a-forum-with-laravel/episodes/101\\\">Source</a>]</p>\",\"fields\":{\"title\":\"Lessons from Laracasts, Part 2\",\"date\":\"27 April, 2018\",\"url\":\"http://unlikenesses.com/2018-04-27-laracasts-lessons-part-2/\"}}},\"pathContext\":{\"slug\":\"/2018-04-27-laracasts-lessons-part-2/\",\"prev\":{\"fields\":{\"title\":\"Lessons from Laracasts, Part 1\",\"date\":\"24 March, 2018\",\"slug\":\"/2018-03-24-laracasts-lessons/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"next\":null,\"_PARENT\":\"SOURCE\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2018-04-27-laracasts-lessons-part-2.json\n// module id = 354\n// module chunks = 147632645264318"],"sourceRoot":""}