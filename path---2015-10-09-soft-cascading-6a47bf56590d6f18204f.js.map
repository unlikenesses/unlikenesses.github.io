{"version":3,"sources":["webpack:///path---2015-10-09-soft-cascading-6a47bf56590d6f18204f.js","webpack:///./.cache/json/2015-10-09-soft-cascading.json"],"names":["webpackJsonp","331","module","exports","data","post","html","fields","title","date","url","pathContext","slug","prev","_PARENT","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,6mRAA0rQC,QAA8oBC,MAAA,iBAAAC,KAAA,mBAAAC,IAAA,wDAAgHC,aAAgBC,KAAA,8BAAAC,MAA6CN,QAAUC,MAAA,qBAAAC,KAAA,qBAAAG,KAAA,kCAAAE,QAAA,UAAqHA,QAAA,UAAoBC,MAASR,QAAUC,MAAA,UAAAC,KAAA,mBAAAG,KAAA,uBAAAE,QAAA,UAA6FA,QAAA,UAAoBA,QAAA","file":"path---2015-10-09-soft-cascading-6a47bf56590d6f18204f.js","sourcesContent":["webpackJsonp([32735643032460],{\n\n/***/ 331:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"html\":\"<p>So despite my adventures in Laravel (which continue whenever I have some spare time), the difficulties deploying it to crappy shared hosting are making me stick to Codeigniter for any real-life, paid work projects. I've recently been porting (well, completely rewriting) my CMS for Codeigniter 3, and have decided to implement cascading deletes. All very easy with MySQL:</p>\\n<p>Imagine I have two tables, <code>employers</code> and <code>employees</code>. <code>employees</code> is a child table of <code>employers</code>, and has a field that contains the parent row's <code>id</code>. Set this as index. Then set as foreign key related to the employer <code>id</code>. Then specify <code>on delete cascade</code>.</p>\\n<p>This works fine. But what if I want to implement soft-deletes? I am using Jamie Rumbelow's <a href=\\\"https://github.com/jamierumbelow/codeigniter-base-model\\\">base model</a>. It's very easy to set up soft deletes. In <code>MY_Model</code>, set</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$soft_delete</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">TRUE</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>and</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$soft_delete_key</span>\\n</code></pre>\\n      </div>\\n<p>to the <code>deleted</code> field (must be <code>INT</code> or <code>TINYINT</code>) in your table.</p>\\n<p>Now I create an employer, add an employee. Delete the employer, and magically its <code>deleted</code> flag is set to <code>1</code>. I can restore the employer by resetting the flag to zero.</p>\\n<p>The problem we now have is that we want to soft-delete any children of this employer too: a kind of cascade for the <code>deleted</code> flag. Luckily <code>MY_Model</code> provides callback functions for <code>create</code>, <code>update</code>, <code>get</code> and <code>delete</code>. I should be able to create a function which is called after the <code>delete</code> method, which will go through all the children of a parent row and set their <code>deleted</code> flag to <code>1</code>.</p>\\n<p>So in my <code>Admin</code> model (which extends <code>MY_Model</code>) I add <code>public $before_delete = array('cascade_soft_delete');</code>, and create a function <code>cascade_soft_delete</code>. But then how do I know what the child table is of any given parent table? Or even if the table in which the row has been deleted IS a parent table? </p>\\n<p>Enter relationships, also provided for by Rumbelow's <code>MY_Model</code>. I can say that one table 'belongs to' another, and that another table 'has many' of another. So in this case, <code>employees</code> 'belongs to' <code>employers</code>, and <code>employers</code> 'has many' <code>employees</code>. But here I hit a problem. According to the repo's <a href=\\\"https://github.com/jamierumbelow/codeigniter-base-model/blob/master/README.md\\\">readme</a>, 'It will assume that a <code>MY_Model</code> API-compatible model with the singular relationship's name has been defined'. But I am not using models for each table. Instead, I have a single, <code>Admin</code> model which takes care of CRUD commands for all my tables. If I want to change the <code>$table</code> variable, I call a <code>set_table</code> method in the <code>Admin</code> model, called from the controller for a particular table. Actually, it turns out that this works anyway.</p>\\n<p>So if I go ahead and create a similar function called <code>set_belongs_to</code> in my <code>Admin</code> model, then call it in my <code>Employees</code> controller, like so:</p>\\n<p>Admin model:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">set_belongs_to</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$table</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">belongs_to</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$table</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Employees controller:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">Admin_model</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">set_belongs_to</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'employers'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>I can then finally write the <code>cascade_soft_delete</code> method. It's very simple:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">cascade_soft_delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$table</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">table</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">has_many</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token variable\\\">$child</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">set_table</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$child</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">update_by</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'parent'</span><span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span><span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'deleted'</span><span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">set_table</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$table</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>First it grabs the current table so it can restore it at the end. Then, it loops through the <code>has_many</code> array (which in my example only contains <code>employees</code>) to grab the children. For each child, it sets it as the current working table, then updates it, setting <code>deleted</code> to be <code>1</code> where the <code>parent</code> foreign key field is equal to the <code>$row</code> variable (i.e. the <code>id</code> of the row about to be deleted from the parent table). At the end it resets the working table to the parent table. And hey presto: cascading soft deletes!</p>\",\"fields\":{\"title\":\"soft cascading\",\"date\":\"09 October, 2015\",\"url\":\"http://unlikenesses.com/2015-10-09-soft-cascading/\"}}},\"pathContext\":{\"slug\":\"/2015-10-09-soft-cascading/\",\"prev\":{\"fields\":{\"title\":\"literally literals\",\"date\":\"06 September, 2015\",\"slug\":\"/2015-09-06-literally-literals/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"next\":{\"fields\":{\"title\":\"tanking\",\"date\":\"22 October, 2015\",\"slug\":\"/2015-10-22-tanking/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2015-10-09-soft-cascading-6a47bf56590d6f18204f.js","module.exports = {\"data\":{\"post\":{\"html\":\"<p>So despite my adventures in Laravel (which continue whenever I have some spare time), the difficulties deploying it to crappy shared hosting are making me stick to Codeigniter for any real-life, paid work projects. I've recently been porting (well, completely rewriting) my CMS for Codeigniter 3, and have decided to implement cascading deletes. All very easy with MySQL:</p>\\n<p>Imagine I have two tables, <code>employers</code> and <code>employees</code>. <code>employees</code> is a child table of <code>employers</code>, and has a field that contains the parent row's <code>id</code>. Set this as index. Then set as foreign key related to the employer <code>id</code>. Then specify <code>on delete cascade</code>.</p>\\n<p>This works fine. But what if I want to implement soft-deletes? I am using Jamie Rumbelow's <a href=\\\"https://github.com/jamierumbelow/codeigniter-base-model\\\">base model</a>. It's very easy to set up soft deletes. In <code>MY_Model</code>, set</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$soft_delete</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">TRUE</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>and</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token variable\\\">$soft_delete_key</span>\\n</code></pre>\\n      </div>\\n<p>to the <code>deleted</code> field (must be <code>INT</code> or <code>TINYINT</code>) in your table.</p>\\n<p>Now I create an employer, add an employee. Delete the employer, and magically its <code>deleted</code> flag is set to <code>1</code>. I can restore the employer by resetting the flag to zero.</p>\\n<p>The problem we now have is that we want to soft-delete any children of this employer too: a kind of cascade for the <code>deleted</code> flag. Luckily <code>MY_Model</code> provides callback functions for <code>create</code>, <code>update</code>, <code>get</code> and <code>delete</code>. I should be able to create a function which is called after the <code>delete</code> method, which will go through all the children of a parent row and set their <code>deleted</code> flag to <code>1</code>.</p>\\n<p>So in my <code>Admin</code> model (which extends <code>MY_Model</code>) I add <code>public $before_delete = array('cascade_soft_delete');</code>, and create a function <code>cascade_soft_delete</code>. But then how do I know what the child table is of any given parent table? Or even if the table in which the row has been deleted IS a parent table? </p>\\n<p>Enter relationships, also provided for by Rumbelow's <code>MY_Model</code>. I can say that one table 'belongs to' another, and that another table 'has many' of another. So in this case, <code>employees</code> 'belongs to' <code>employers</code>, and <code>employers</code> 'has many' <code>employees</code>. But here I hit a problem. According to the repo's <a href=\\\"https://github.com/jamierumbelow/codeigniter-base-model/blob/master/README.md\\\">readme</a>, 'It will assume that a <code>MY_Model</code> API-compatible model with the singular relationship's name has been defined'. But I am not using models for each table. Instead, I have a single, <code>Admin</code> model which takes care of CRUD commands for all my tables. If I want to change the <code>$table</code> variable, I call a <code>set_table</code> method in the <code>Admin</code> model, called from the controller for a particular table. Actually, it turns out that this works anyway.</p>\\n<p>So if I go ahead and create a similar function called <code>set_belongs_to</code> in my <code>Admin</code> model, then call it in my <code>Employees</code> controller, like so:</p>\\n<p>Admin model:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">set_belongs_to</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$table</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">belongs_to</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$table</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Employees controller:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">Admin_model</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">set_belongs_to</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'employers'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>I can then finally write the <code>cascade_soft_delete</code> method. It's very simple:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">cascade_soft_delete</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$table</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">table</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token property\\\">has_many</span> <span class=\\\"token keyword\\\">as</span> <span class=\\\"token variable\\\">$child</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">set_table</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$child</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">update_by</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'parent'</span><span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span><span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'deleted'</span><span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span><span class=\\\"token function\\\">set_table</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$table</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$row</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>First it grabs the current table so it can restore it at the end. Then, it loops through the <code>has_many</code> array (which in my example only contains <code>employees</code>) to grab the children. For each child, it sets it as the current working table, then updates it, setting <code>deleted</code> to be <code>1</code> where the <code>parent</code> foreign key field is equal to the <code>$row</code> variable (i.e. the <code>id</code> of the row about to be deleted from the parent table). At the end it resets the working table to the parent table. And hey presto: cascading soft deletes!</p>\",\"fields\":{\"title\":\"soft cascading\",\"date\":\"09 October, 2015\",\"url\":\"http://unlikenesses.com/2015-10-09-soft-cascading/\"}}},\"pathContext\":{\"slug\":\"/2015-10-09-soft-cascading/\",\"prev\":{\"fields\":{\"title\":\"literally literals\",\"date\":\"06 September, 2015\",\"slug\":\"/2015-09-06-literally-literals/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"next\":{\"fields\":{\"title\":\"tanking\",\"date\":\"22 October, 2015\",\"slug\":\"/2015-10-22-tanking/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2015-10-09-soft-cascading.json\n// module id = 331\n// module chunks = 32735643032460"],"sourceRoot":""}