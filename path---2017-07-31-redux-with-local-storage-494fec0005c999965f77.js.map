{"version":3,"sources":["webpack:///path---2017-07-31-redux-with-local-storage-494fec0005c999965f77.js","webpack:///./.cache/json/2017-07-31-redux-with-local-storage.json"],"names":["webpackJsonp","349","module","exports","data","post","html","fields","title","date","url","pathContext","slug","prev","_PARENT","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,kwEAAAC,QAAwyEC,MAAA,2BAAAC,KAAA,gBAAAC,IAAA,kEAAiIC,aAAgBC,KAAA,wCAAAC,MAAuDN,QAAUC,MAAA,gCAAAC,KAAA,gBAAAG,KAAA,6CAAAE,QAAA,UAAsIA,QAAA,UAAoBC,MAASR,QAAUC,MAAA,8BAAAC,KAAA,kBAAAG,KAAA,2CAAAE,QAAA,UAAoIA,QAAA,UAAoBA,QAAA","file":"path---2017-07-31-redux-with-local-storage-494fec0005c999965f77.js","sourcesContent":["webpackJsonp([42858671310536],{\n\n/***/ 349:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"html\":\"<p>I'm in the process of converting the <a href=\\\"https://github.com/drumvc/drumvc.github.io/tree/master/framework/react\\\">React version</a> of <a href=\\\"http://drumvc.com\\\">DruMVC</a> to use <a href=\\\"https://github.com/reactjs/react-redux\\\">Redux</a>. It was pretty straightforward until I got to the bits that used <code>localStorage</code>, the browser-based <a href=\\\"https://developer.mozilla.org/en/docs/Web/API/Window/localStorage\\\">storage object</a>. The \\\"vanilla\\\"-React version uses the <code>componentWillMount</code> and <code>componentWillUpdate</code> <a href=\\\"https://facebook.github.io/react/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class\\\">lifecycle hooks</a> to get and set, respectively, the <code>localStorage</code> data. I.e. when the <code>App</code> component loads, it checks if <code>localStorage</code> contains any data (in the case of DruMVC, this data is just the configuration of on/off notes for each track), and if so it updates the <code>state</code> accordingly. Similarly, when the <code>state</code> changes, the <code>App</code> component will save it to <code>localStorage</code>. You can see the code <a href=\\\"https://github.com/drumvc/drumvc.github.io/blob/master/framework/react/src/components/App.js\\\">here</a>.</p>\\n<p>But now that the <code>state</code>, under Redux, is no longer a property of the <code>App</code> component, how and when do we call the relevant <code>getItem</code> and <code>setItem</code> commands?</p>\\n<p><a href=\\\"https://stackoverflow.com/a/35675304\\\">This SO answer</a> by Redux co-author <a href=\\\"https://github.com/gaearon\\\">Dan Abramov</a> suggests using <code>subscribe</code> to set <code>localStorage</code> and to get it by passing it as an argument to <code>createStore</code>. His <a href=\\\"https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage\\\">video</a> shows in more detail how to do this. Briefly, following the video, I create a new module, <code>localStorage.js</code>, with two methods, <code>loadState</code> and <code>saveState</code>. In my <code>index.js</code> I then pass the loaded state to <code>createStore</code>, and set up a <a href=\\\"http://redux.js.org/docs/api/Store.html#subscribe\\\"><code>subscribe</code> listener</a>, which saves a subsection of the state. </p>\",\"fields\":{\"title\":\"redux with local storage\",\"date\":\"31 July, 2017\",\"url\":\"http://unlikenesses.com/2017-07-31-redux-with-local-storage/\"}}},\"pathContext\":{\"slug\":\"/2017-07-31-redux-with-local-storage/\",\"prev\":{\"fields\":{\"title\":\"rails on windows with vagrant\",\"date\":\"19 July, 2017\",\"slug\":\"/2017-07-19-rails-on-windows-with-vagrant/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"next\":{\"fields\":{\"title\":\"JWTs with React and Laravel\",\"date\":\"10 August, 2017\",\"slug\":\"/2017-08-10-jwts-with-react-and-laravel/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2017-07-31-redux-with-local-storage-494fec0005c999965f77.js","module.exports = {\"data\":{\"post\":{\"html\":\"<p>I'm in the process of converting the <a href=\\\"https://github.com/drumvc/drumvc.github.io/tree/master/framework/react\\\">React version</a> of <a href=\\\"http://drumvc.com\\\">DruMVC</a> to use <a href=\\\"https://github.com/reactjs/react-redux\\\">Redux</a>. It was pretty straightforward until I got to the bits that used <code>localStorage</code>, the browser-based <a href=\\\"https://developer.mozilla.org/en/docs/Web/API/Window/localStorage\\\">storage object</a>. The \\\"vanilla\\\"-React version uses the <code>componentWillMount</code> and <code>componentWillUpdate</code> <a href=\\\"https://facebook.github.io/react/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class\\\">lifecycle hooks</a> to get and set, respectively, the <code>localStorage</code> data. I.e. when the <code>App</code> component loads, it checks if <code>localStorage</code> contains any data (in the case of DruMVC, this data is just the configuration of on/off notes for each track), and if so it updates the <code>state</code> accordingly. Similarly, when the <code>state</code> changes, the <code>App</code> component will save it to <code>localStorage</code>. You can see the code <a href=\\\"https://github.com/drumvc/drumvc.github.io/blob/master/framework/react/src/components/App.js\\\">here</a>.</p>\\n<p>But now that the <code>state</code>, under Redux, is no longer a property of the <code>App</code> component, how and when do we call the relevant <code>getItem</code> and <code>setItem</code> commands?</p>\\n<p><a href=\\\"https://stackoverflow.com/a/35675304\\\">This SO answer</a> by Redux co-author <a href=\\\"https://github.com/gaearon\\\">Dan Abramov</a> suggests using <code>subscribe</code> to set <code>localStorage</code> and to get it by passing it as an argument to <code>createStore</code>. His <a href=\\\"https://egghead.io/lessons/javascript-redux-persisting-the-state-to-the-local-storage\\\">video</a> shows in more detail how to do this. Briefly, following the video, I create a new module, <code>localStorage.js</code>, with two methods, <code>loadState</code> and <code>saveState</code>. In my <code>index.js</code> I then pass the loaded state to <code>createStore</code>, and set up a <a href=\\\"http://redux.js.org/docs/api/Store.html#subscribe\\\"><code>subscribe</code> listener</a>, which saves a subsection of the state. </p>\",\"fields\":{\"title\":\"redux with local storage\",\"date\":\"31 July, 2017\",\"url\":\"http://unlikenesses.com/2017-07-31-redux-with-local-storage/\"}}},\"pathContext\":{\"slug\":\"/2017-07-31-redux-with-local-storage/\",\"prev\":{\"fields\":{\"title\":\"rails on windows with vagrant\",\"date\":\"19 July, 2017\",\"slug\":\"/2017-07-19-rails-on-windows-with-vagrant/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"next\":{\"fields\":{\"title\":\"JWTs with React and Laravel\",\"date\":\"10 August, 2017\",\"slug\":\"/2017-08-10-jwts-with-react-and-laravel/\",\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"},\"_PARENT\":\"SOURCE\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2017-07-31-redux-with-local-storage.json\n// module id = 349\n// module chunks = 42858671310536"],"sourceRoot":""}